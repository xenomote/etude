// Code generated by "stringer -type Production"; DO NOT EDIT.

package parser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ERROR-0]
	_ = x[PROGRAM-1]
	_ = x[BLOCK-2]
	_ = x[STATEMENT-3]
	_ = x[FUNC-4]
	_ = x[COMP-5]
	_ = x[TYPEDEF-6]
	_ = x[IF-7]
	_ = x[ON-8]
	_ = x[FOR-9]
	_ = x[ASSIGN-10]
	_ = x[RETURN-11]
	_ = x[EXPRESSION-12]
	_ = x[EXPRESSION_CONSTRUCTOR-13]
	_ = x[EXPRESSION_FIELDS-14]
	_ = x[EXPRESSION_FIELD-15]
	_ = x[TYPE-16]
	_ = x[TYPE_CONSTRUCTOR-17]
	_ = x[TYPE_FIELDS-18]
	_ = x[TYPE_FIELD-19]
	_ = x[OP_PREFIX-20]
	_ = x[OP_SUFFIX-21]
	_ = x[OP_INFIX-22]
	_ = x[LITERAL-23]
	_ = x[REF_NAME-24]
	_ = x[REF_PATH-25]
}

const _Production_name = "ERRORPROGRAMBLOCKSTATEMENTFUNCCOMPTYPEDEFIFONFORASSIGNRETURNEXPRESSIONEXPRESSION_CONSTRUCTOREXPRESSION_FIELDSEXPRESSION_FIELDTYPETYPE_CONSTRUCTORTYPE_FIELDSTYPE_FIELDOP_PREFIXOP_SUFFIXOP_INFIXLITERALREF_NAMEREF_PATH"

var _Production_index = [...]uint8{0, 5, 12, 17, 26, 30, 34, 41, 43, 45, 48, 54, 60, 70, 92, 109, 125, 129, 145, 156, 166, 175, 184, 192, 199, 207, 215}

func (i Production) String() string {
	if i >= Production(len(_Production_index)-1) {
		return "Production(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Production_name[_Production_index[i]:_Production_index[i+1]]
}
