// Code generated by "stringer -type Kind"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ERROR-0]
	_ = x[END-1]
	_ = x[COMP-2]
	_ = x[TYPE-3]
	_ = x[FUNC-4]
	_ = x[IF-5]
	_ = x[OR-6]
	_ = x[ON-7]
	_ = x[FOR-8]
	_ = x[RETURN-9]
	_ = x[EQUALS-10]
	_ = x[EXCLAIM-11]
	_ = x[ELLIPSIS-12]
	_ = x[DOUBLE_EQUALS-13]
	_ = x[EXCLAIM_EQUALS-14]
	_ = x[LESS-15]
	_ = x[LESS_EQUALS-16]
	_ = x[GREATER-17]
	_ = x[GREATER_EQUALS-18]
	_ = x[DOUBLE_AMPERSAND-19]
	_ = x[DOUBLE_PIPE-20]
	_ = x[SHIFT_LEFT-21]
	_ = x[SHIFT_RIGHT-22]
	_ = x[NUMBER-23]
	_ = x[STRING-24]
	_ = x[BOOLEAN-25]
	_ = x[IDENTIFIER-26]
	_ = x[CURLY_LEFT-123]
	_ = x[CURLY_RIGHT-125]
	_ = x[ROUND_LEFT-40]
	_ = x[ROUND_RIGHT-41]
	_ = x[SQUARE_LEFT-91]
	_ = x[SQUARE_RIGHT-93]
	_ = x[MINUS-45]
	_ = x[PLUS-43]
	_ = x[STAR-42]
	_ = x[SLASH-47]
	_ = x[CARRET-94]
	_ = x[PERCENT-37]
	_ = x[ADDRESS-64]
	_ = x[QUESTION-63]
	_ = x[HASH-35]
	_ = x[TILDE-126]
	_ = x[COLON-58]
	_ = x[COMMA-44]
	_ = x[PERIOD-46]
}

const (
	_Kind_name_0 = "ERRORENDCOMPTYPEFUNCIFORONFORRETURNEQUALSEXCLAIMELLIPSISDOUBLE_EQUALSEXCLAIM_EQUALSLESSLESS_EQUALSGREATERGREATER_EQUALSDOUBLE_AMPERSANDDOUBLE_PIPESHIFT_LEFTSHIFT_RIGHTNUMBERSTRINGBOOLEANIDENTIFIER"
	_Kind_name_1 = "HASH"
	_Kind_name_2 = "PERCENT"
	_Kind_name_3 = "ROUND_LEFTROUND_RIGHTSTARPLUSCOMMAMINUSPERIODSLASH"
	_Kind_name_4 = "COLON"
	_Kind_name_5 = "QUESTIONADDRESS"
	_Kind_name_6 = "SQUARE_LEFT"
	_Kind_name_7 = "SQUARE_RIGHTCARRET"
	_Kind_name_8 = "CURLY_LEFT"
	_Kind_name_9 = "CURLY_RIGHTTILDE"
)

var (
	_Kind_index_0 = [...]uint8{0, 5, 8, 12, 16, 20, 22, 24, 26, 29, 35, 41, 48, 56, 69, 83, 87, 98, 105, 119, 135, 146, 156, 167, 173, 179, 186, 196}
	_Kind_index_3 = [...]uint8{0, 10, 21, 25, 29, 34, 39, 45, 50}
	_Kind_index_5 = [...]uint8{0, 8, 15}
	_Kind_index_7 = [...]uint8{0, 12, 18}
	_Kind_index_9 = [...]uint8{0, 11, 16}
)

func (i Kind) String() string {
	switch {
	case i <= 26:
		return _Kind_name_0[_Kind_index_0[i]:_Kind_index_0[i+1]]
	case i == 35:
		return _Kind_name_1
	case i == 37:
		return _Kind_name_2
	case 40 <= i && i <= 47:
		i -= 40
		return _Kind_name_3[_Kind_index_3[i]:_Kind_index_3[i+1]]
	case i == 58:
		return _Kind_name_4
	case 63 <= i && i <= 64:
		i -= 63
		return _Kind_name_5[_Kind_index_5[i]:_Kind_index_5[i+1]]
	case i == 91:
		return _Kind_name_6
	case 93 <= i && i <= 94:
		i -= 93
		return _Kind_name_7[_Kind_index_7[i]:_Kind_index_7[i+1]]
	case i == 123:
		return _Kind_name_8
	case 125 <= i && i <= 126:
		i -= 125
		return _Kind_name_9[_Kind_index_9[i]:_Kind_index_9[i+1]]
	default:
		return "Kind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
