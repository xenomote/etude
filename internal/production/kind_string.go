// Code generated by "stringer -type Kind"; DO NOT EDIT.

package production

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ERROR-0]
	_ = x[PROGRAM-1]
	_ = x[BLOCK-2]
	_ = x[STATEMENT-3]
	_ = x[FUNC-4]
	_ = x[COMP-5]
	_ = x[TYPEDEF-6]
	_ = x[IF-7]
	_ = x[ON-8]
	_ = x[FOR-9]
	_ = x[ASSIGN-10]
	_ = x[RETURN-11]
	_ = x[EXPRESSION-12]
	_ = x[EXPRESSION_OPERATOR-13]
	_ = x[EXPRESSION_CONSTRUCTOR-14]
	_ = x[EXPRESSION_FIELD-15]
	_ = x[TYPE-16]
	_ = x[TYPE_CONSTRUCTOR-17]
	_ = x[TYPE_FIELD-18]
	_ = x[TYPE_MAP-19]
	_ = x[OPERAND-20]
	_ = x[OP_PREFIX-21]
	_ = x[OP_SUFFIX-22]
	_ = x[OP_INFIX-23]
	_ = x[LITERAL-24]
	_ = x[REF_NAME-25]
	_ = x[REF_PATH-26]
	_ = x[PATH-27]
}

const _Kind_name = "ERRORPROGRAMBLOCKSTATEMENTFUNCCOMPTYPEDEFIFONFORASSIGNRETURNEXPRESSIONEXPRESSION_OPERATOREXPRESSION_CONSTRUCTOREXPRESSION_FIELDTYPETYPE_CONSTRUCTORTYPE_FIELDTYPE_MAPOPERANDOP_PREFIXOP_SUFFIXOP_INFIXLITERALREF_NAMEREF_PATHPATH"

var _Kind_index = [...]uint8{0, 5, 12, 17, 26, 30, 34, 41, 43, 45, 48, 54, 60, 70, 89, 111, 127, 131, 147, 157, 165, 172, 181, 190, 198, 205, 213, 221, 225}

func (i Kind) String() string {
	if i >= Kind(len(_Kind_index)-1) {
		return "Kind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Kind_name[_Kind_index[i]:_Kind_index[i+1]]
}
